# .github/workflows/release.yml

name: Create and Publish Release

on:
  push:
    branches:
      - main
    paths:
      - 'version.json'

permissions:
  contents: write # Required to create releases and push a commit

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: 'btxz/go.sum'

      - name: Read version from version.json
        id: version_reader
        run: |
          version=$(jq -r '.version' version.json)
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "Read version v${version} from version.json"

      - name: Build cross-platform binaries
        # This step now simply executes our robust build script, passing the version.
        run: ./scripts/build.sh ${{ env.VERSION }}

      - name: Generate Checksums
        # This step executes our checksum script.
        run: ./scripts/generate-checksums.sh

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          # Using the same professional release notes from before.
          body: |
            ## BTXZ™ v${{ env.VERSION }}

            This is the official release of **BTXZ™ v${{ env.VERSION }}**.

            See [LICENSE.md](LICENSE.md) for usage terms.

            ### What's New
            *   For a detailed list of changes, please see the [commit history](https://github.com/${{ github.repository }}/commits/v${{ env.VERSION }}).

            ### Installation
            Convenient one-liner installers are available for your shell.

            **Linux / macOS / Termux (bash/zsh)**
            ```sh
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | sh
            ```

            **Windows (PowerShell)**
            ```powershell
            Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass; iwr https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.ps1 | iex
            ```

            ### Verification
            You can verify the integrity of the downloaded binaries using the `sha256sums.txt` file attached to this release.
            For example, on Linux/macOS:
            ```sh
            sha256sum --check sha256sums.txt
            ```
          # Files to upload, including the new checksums file.
          files: |
            artifacts/btxz-*
            artifacts/sha256sums.txt
            scripts/install.sh
            scripts/install.ps1

      - name: Update version.json with download URLs
        id: update_json
        run: |
          echo "Updating version.json with release asset URLs..."
          urls_json=$(echo '${{ steps.create_release.outputs.assets }}' | \
            jq -r '[.[] | {key: .name, value: .browser_download_url}] | from_entries')
          jq --argjson urls "$urls_json" '.urls = $urls' version.json > version.json.tmp && mv version.json.tmp version.json
          
          echo "Updated version.json content:"
          cat version.json

      - name: Commit and push updated version.json
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add version.json
          
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(release): Update asset URLs for v${{ env.VERSION }}"
            git push
          fi
