name: Create and Publish Release

on:
  push:
    branches: [ main ]
    paths:
      - version.json

jobs:
  # ===================================================================
  # BUILD ON UBUNTU 20.04 (FOR WIDE COMPATIBILITY)
  # ===================================================================
  build-compatible:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        run: echo "VERSION=$(jq -r .version version.json)" >> $GITHUB_ENV

      - name: Inject version into Go source
        run: |
          sed -i "s/^const version = .*$/const version = \"${{ env.VERSION }}\"/" btxz/main.go
          
      - name: Build cross-platform binaries (Compatible)
        run: |
          chmod +x scripts/build.sh
          # Pass 'compat' as the suffix
          scripts/build.sh ${{ env.VERSION }} compat

      - name: Upload compatible artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compatible-binaries
          path: artifacts/

  # ===================================================================
  # BUILD ON UBUNTU 22.04 (FOR MODERN SYSTEMS)
  # ===================================================================
  build-modern:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        run: echo "VERSION=$(jq -r .version version.json)" >> $GITHUB_ENV

      - name: Inject version into Go source
        run: |
          sed -i "s/^const version = .*$/const version = \"${{ env.VERSION }}\"/" btxz/main.go

      - name: Build cross-platform binaries (Modern)
        run: |
          chmod +x scripts/build.sh
          # Pass 'modern' as the suffix
          scripts/build.sh ${{ env.VERSION }} modern

      - name: Upload modern artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modern-binaries
          path: artifacts/

  # ===================================================================
  # COLLECT ALL BINARIES AND CREATE A SINGLE RELEASE
  # ===================================================================
  release:
    # This job runs only after both build jobs are successful
    needs: [build-compatible, build-modern]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version
        run: echo "VERSION=$(jq -r .version version.json)" >> $GITHUB_ENV
        
      - name: Get Release Notes from Commit
        id: get_notes
        run: |
          COMMIT_MSG=$(git log -1 --pretty='format:%B' -- version.json)
          echo "NOTES<<EOF" >> $GITHUB_ENV
          echo "${COMMIT_MSG}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts from both build jobs into a single directory
          path: combined-artifacts
          # This merges 'compatible-binaries' and 'modern-binaries' folders
          merge-multiple: true 
          
      - name: Generate checksums
        run: |
         
          chmod +x scripts/generate-checksums.sh
  
          mkdir -p artifacts
          mv combined-artifacts/* artifacts/
          scripts/generate-checksums.sh
    
          mv sha256sums.txt ..
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          body: ${{ steps.get_notes.outputs.NOTES }}
          files: |
            artifacts/*
            sha256sums.txt
            scripts/install.sh
            scripts/install.ps1

      - name: Update version.json with download URLs
        run: |
          urls_json=$(echo '${{ steps.create_release.outputs.assets }}' | jq -r '[.[] | {key: .name, value: .browser_download_url}] | from_entries')
          jq --argjson urls "$urls_json" '.urls = $urls' version.json > version.json.tmp && mv version.json.tmp version.json
          cat version.json

      - name: Commit and push updated version.json
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add version.json
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(release): Update asset URLs for v${{ env.VERSION }}"
            git push
          fi
